name: CI/CD Pipeline

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (dev or prod)'
        required: false
        default: 'dev'

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
      TFVARS_FILE: envs/${{ github.event.inputs.environment || 'dev' }}/terraform.tfvars
      STATE_KEY: terraform-${{ github.event.inputs.environment || 'dev' }}.tfstate
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Install dependencies
        run: |
          pip install -r requirements.txt || true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Terraform Init & Validate
        run: |
          # Clean any local state that might interfere
          rm -rf .terraform/
          
          # Initialize with proper backend config
          terraform init \
            -backend-config="bucket=customer-feedback-terraform-state" \
            -backend-config="key=${ENVIRONMENT}/terraform.tfstate" \
            -backend-config="region=ap-south-1" \
            -backend-config="dynamodb_table=terraform-locks" \
            -input=false -force-copy
          
          # Validate configuration
          terraform validate
          
          # Show current state
          echo "Current state resources:"
          terraform state list || echo "No state or unable to list state"

      - name: Run tests
        run: |
          echo "Running placeholder tests..."
          # Add your test commands below
          # Example: pytest tests/

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t analytics-dashboard:${{ github.sha }} ./dashboard

      - name: Tag Docker image
        run: |
          docker tag analytics-dashboard:${{ github.sha }} $AWS_ACCOUNT_ID.dkr.ecr.ap-south-1.amazonaws.com/analytics-dashboard:${{ github.sha }}

      - name: Push Docker image
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.ap-south-1.amazonaws.com/analytics-dashboard:${{ github.sha }}

      - name: Check and prepare ECR repository
        run: |
          # Check if ECR repository exists
          echo "Checking if ECR repository exists..."
          if ! aws ecr describe-repositories --repository-names analytics-dashboard --region ap-south-1 >/dev/null 2>&1; then
            echo "ECR repository does not exist, creating it manually..."
            aws ecr create-repository --repository-name analytics-dashboard --region ap-south-1
          else
            echo "ECR repository already exists"
          fi

      - name: Terraform Apply
        run: |
          # Remove any stale terraform files
          rm -rf .terraform/
          rm -f terraform.tfstate*
          
          # Ensure we have the latest state before proceeding
          terraform init \
            -backend-config="bucket=customer-feedback-terraform-state" \
            -backend-config="key=${ENVIRONMENT}/terraform.tfstate" \
            -backend-config="region=ap-south-1" \
            -backend-config="dynamodb_table=terraform-locks" \
            -input=false -force-copy -reconfigure
          
          # Run a targeted plan excluding ECR to avoid errors
          echo "Running targeted plan..."
          terraform plan -target="module.lambda_api_gateway" -target="module.api_gateway_stage" -target="module.dynamodb_feedback" -target="module.event_alerting" -target="module.cloudwatch_monitoring" -target="module.cicd_pipeline" -target="module.analytics_dashboard" -target="module.iam_lambda_role" -var="dashboard_image=$AWS_ACCOUNT_ID.dkr.ecr.ap-south-1.amazonaws.com/analytics-dashboard:${{ github.sha }}" -var-file=${TFVARS_FILE}
          
          # Now run the apply with all required variables
          echo "Running full apply..."
          terraform apply -auto-approve -var="dashboard_image=$AWS_ACCOUNT_ID.dkr.ecr.ap-south-1.amazonaws.com/analytics-dashboard:${{ github.sha }}" -var-file=${TFVARS_FILE}
